<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, February 6, 2003, 3:59 PM -->
<!-- MuClient version 3.32 -->

<!-- Plugin "GainMonitor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="GainMonitor"
   author="Balaam"
   id="bd2bc029cebbdff624bd1b7b"
   language="Lua"
   purpose="monitors exp, quest point, and gold gains, giving hourly reports."
   save_state="y"
   date_written="2003-01-23 09:58:36"
   requires="4.00"
   version="1.03"
   >
<description trim="y">
<![CDATA[
 1.03 -- Double qp rewards for arbitrary reasons added.
      -- Track gold gains from selling to vendors

 1.02 -- Double qp rewards for quests are now tracked.  Can't believe I forot that.

 1.01 -- Fixed several issues in campaign tracking and reporting
         Thanks to Cookar
      -- Finally tracked down a really dumb bug with how levels were reporting
         Thanks to Witblitz

 1.00 -- Fixed the remaining known stability issues.  I am finally confident enough
         in this to give it an actual release number instead of a dev number.  Yay!
      -- GainMonitor will now in theory never crash due to a lost mob name again.
         Now if only I could figure out why it is losing the mob names...
      -- New features will be in development as soon as I can figure out how to keep
         everything backwards compatible.

 0.12 -- fixed an issue with levels not registering completely
      -- Thanks again to Witblitz

 0.11 -- fixed several errors in campaign tracking.
      -- Thanks to Witblitz for testing and tracking down mismatched triggers

 0.09 -- Combined several scripts into this gainmonitor script.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

  <!-- killing mobs -->

  <trigger
   enabled="y"
   match="^You receive (\d+(?:\+\d+)*) experience points?\.$"
   regexp="y"
   name="MobXP"
   script="MobXP"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You receive * bonus experience points *."
   name="BonusXP"
   script="MobXP"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^You get (\d{1,3}(?:\,\d{3})*) gold coins? from the [\w ]+ corpse of .+\.$"
   name="MobGold"
   script="GetGold"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^(\w+) splits? (\d+) gold coins?. Your share is (\d+) gold\.$"
   name="SplitGold"
   script="SplitGold"
   sequence="100"
  >
  </trigger>
  
  <!-- selling things -->
  <trigger
   enabled="y"
   regexp="y"
   match="^You (?:sell|haggle) .* (\d+) gold\.$"
   name="Selling"
   script="GetGold"
   sequence="100"
  >
  </trigger>
  
  
  <!-- level info -->
  
  <trigger
   enabled="y"
   match="Congratulations hero. You have increased your powers!"
   name="pup"
   script="OnLevel"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You raise a level! You are now level *."
   name="level"
   script="OnLevel"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="INFO: *"
   name="levelinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^You have \w+ daily blessing bonus"
   name="RemainingDaily"
   group="lInfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^You gain (\d)+ hit points\, (\d)+ mana\, (\d)+ moves\, (\d)+ practices? and (\d)+ trains?\."
   name="LevelGains"
   script="LevelGains"
   group="lInfo"
   sequence="99"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^You gain (\d+) trains?\."
   name="PupGains"
   script="PupGains"
   group="lInfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You gain (\d+) extra trains? daily blessing bonus\.$"
   name="LevelTrainDaily"
   regexp="y"
   script="BonusTrain"
   group="lInfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^Lucky! You gain an extra (\d) training sessions?!$"
   name="BonusTrain"
   script="BonusTrain"
   group="lInfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You gain a bonus * point!"
   name="BonusStat"
   script="BonusStat"
   group="lInfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="*"
   name="finishlevel"
   script="EndLevel"
   group="lInfo"
   sequence="101"
  >
  </trigger>
  
  <!-- quest info -->
  
  <trigger
   enabled="y"
   match="QUEST: You may now quest again."
   name="questTime"
   script="questTime"
   sequence="100"
   match_text_colour="y"
   text_colour="9"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="You ask * for a quest."
   name="questStart"
   script="questStart"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'Seek (.*) out somewhere in the vicinity'$"
   name="mobName"
   group="qinfo"
   script="mobName"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'of (.*) which is in the general area'$"
   name="roomName"
   group="qinfo"
   script="roomName"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'of (.*).'$"
   name="areaName"
   group="qinfo"
   script="areaName"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'Aardwolf's most heinous criminal, (.*)'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'has escaped the dungeon!'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'Since the escape, (.*) has murdered '$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you '\d+ civilians?! The penalty for this crime is death, and'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'you are to deliver the sentence!'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'an enemy of mine, (.*) is making vile'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'threats against .*!  This threat must be eliminated!'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="(.*) tells you 'Good luck \w+. Return safely!'$"
   group="qinfo"
   sequence="100"
   text_colour="6"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="QUEST: You have almost completed your QUEST!"
   name="questKilled"
   group="qinfo"
   script="questKilled"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="You hang your head in shame and admit defeat before *."
   group="qinfo"
   name="qfail"
   script="qfail"
   sequence="100"
  >
  </trigger>

  <!-- quest rewards -->

  <trigger
   enabled="y"
   match=".* tells you 'As a reward, I am giving you (\d*) quest points and (\d*) gold.'"
   name="qcompletecatcher"
   regexp="y"
   script="QuestComplete"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^.* tells you 'I am also giving you (.*) quest points? tier bonus.'$"
   name="tierqpcatcher"
   regexp="y"
   group="qreward"
   script="BonusQuest"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You get lucky and gain an extra * quest points."
   name="luckyqpcatcher"
   script="BonusQuest"
   group="qreward"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="The gods reward you * bonus quest points"
   name="doubleqp"
   script="BonusQuest"
   group="qreward"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="You gain an extra * quest points 'MCCP Bonus'."
   name="mccpqpcatcher"
   script="BonusQuest"
   group="qreward"
   sequence="100"
  >
  </trigger>
   <trigger
   enabled="y"
   match="You receive * bonus quest points *."
   name="questBonus"
   script="BonusQuest"
   group="qreward"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\*\* You gain a bonus trivia point! \*\*$"
   name="qtpcatcher"
   regexp="y"
   script="AddTP"
   group="qreward"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\*\* You gain a bonus (\d?)\s?training sessions? \*\*\s*$"
   name="qtraincatcher"
   regexp="y"
   script="AddTrains"
   group="qreward"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\*\* You gain a bonus (\d?)\s?practices? \*\*\s*$"
   name="qpraccatcher"
   regexp="y"
   script="AddPracs"
   group="qreward"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="*"
   name="finishqpcatcher"
   script="FinishQuest"
   group="qreward"
   sequence="101"
  >
  </trigger>
  
  <!-- cp info -->
  
  <trigger
   enabled="y"
   regexp="y"
   match="^CONGRATULATIONS! You have completed your campaign\."
   name="cpcompletecatcher"
   script="CPStart"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="                 Reward of * quest points added."
   name="cpqpcatcher"
   script="CPQP"
   group="cpinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^                 Reward of (\d) training sessions? added."
   regexp="y"
   name="cptraincatcher"
   script="CPTrain"
   group="cpinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="                 Reward of (\d) practice sessions? added."
   regexp="y"
   name="cppraccatcher"
   script="CPPrac"
   group="cpinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="                 Reward of 1 trivia point added."
   name="cptpcatcher"
   script="CPTP"
   group="cpinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="                 Reward of * gold coins added."
   name="cpgoldcatcher"
   script="CPGold"
   group="cpinfo"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="*"
   name="finishcpcatcher"
   script="CPStop"
   group="cpinfo"
   sequence="101"
  >
  </trigger>

  <!-- gq info -->

  <trigger
   match="You have now joined the quest. See 'help gquest' for available commands."
   enabled="y"
   name="gqstart"
   script="GQStart"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(\d) quest points? awarded\.$"
   regexp="y"
   name="gqkillcatch"
   script="GQMob"
   sequence="100"
   match_text_colour="y"
   text_colour="9"
  >
  </trigger>
  <trigger
   match="CONGRATULATIONS! You were the first to complete this quest!"
   enabled="y"
   name="gqwinstart"
   script="GQWinStart"
   sequence="100"
   match_text_colour="y"
   text_colour="9"
  >
  </trigger>
  <trigger
   match="Reward of * quest points added."
   enabled="y"
   name="gqqpcatcher"
   group="gqinfo"
   script="GQQP"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Reward of (\d+) training sessions? added\.$"
   enabled="y"
   name="gqtraincatcher"
   group="gqinfo"
   script="GQTrain"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Reward of (\d+) practice sessions? added\.$"
   enabled="y"
   name="gqpraccatcher"
   group="gqinfo"
   script="GQPrac"
   sequence="100"
  >
  </trigger>
  <trigger
   match="Reward of * gold coins added."
   enabled="y"
   name="gqgoldcatcher"
   group="gqinfo"
   script="GQGold"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Global Quest: The global quest has been won by \w+ \- (\d+)\w\w win\.$"
   regexp="y"
   name="gqwinstop"
   script="GQWinStop"
   sequence="101"
  >
  </trigger>
  
  <!-- Note mode -->

  <trigger
   match="You are now posting a new note on the * board."
   enabled="y"
   name="notestart"
   script="StartNote"
   sequence="100"
  >
  </trigger>
  
  <trigger
   match="Note posted on * board."
   enabled="y"
   name="notepost"
   script="EndNote"
   sequence="100"
  >
  </trigger>
  <trigger
   match="Note cancelled!"
   enabled="y"
   name="notecancel"
   script="EndNote"
   sequence="100"
  >
  </trigger>
  <trigger
   match="Pausing note in progress.  Type 'NOTE WRITE' to continue."
   enabled="y"
   name="notepause"
   script="EndNote"
   sequence="100"
  >
  </trigger>
  
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="ReportSession"
   script="ReportSession"
   match="gain:report"
   enabled="y"
  >
  </alias>
  <alias
   name="ResetStats"
   script="ResetStats"
   match="gain:reset"
   enabled="y"
  >
  </alias>
  <alias
   match="gain:qlist"
   script="QuestList"
   send_to="1"
   enabled="y"
  >
  </alias>
  <alias
   match="gain:quiet"
   script="Quiet"
   send_to="1"
   enabled="y"
  >
  </alias>
  <alias
   match="gain:qreset"
   script="ResetQuest"
   send_to="1"
   enabled="y"
  >
  </alias>
  <alias
   match="^gain:col([12]) (@\w)"
   send_to="1"
   regexp="y"
   enabled="y"
   script="ChangeColour"
  >
  </alias>
  <alias
   match="gain:chan"
   send_to="1"
   enabled="y"
   script="ShowChan"
  >
  </alias>
  <alias
   match="^gain:set (cpinfo|gqinfo|level|stats|qinfo|qtime) (.+)"
   send_to="1"
   regexp="y"
   enabled="y"
   script="SetChan"
  >
  </alias>
  <alias
   match="^gain(?:monitor)?:help"
   send_to="1"
   regexp="y"
   enabled="y"
   script="OnPluginHelp"
  >
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  <timer
   name="hourlyReport"
   script="hourlyReport"
   enabled="y"
   hour="1">
  </timer>

</timers>


<!--  Script  -->


<script>
<![CDATA[
--
-- include modules
--
require "serialize"


--
-- Global Variables
--

colourcodes = { ["@r"]=RGBColourToName( GetNormalColour( 2 ) ), ["@g"]=RGBColourToName( GetNormalColour( 3 ) ),
                ["@y"]=RGBColourToName( GetNormalColour( 4 ) ), ["@b"]=RGBColourToName( GetNormalColour( 5 ) ),
		["@m"]=RGBColourToName( GetNormalColour( 6 ) ), ["@c"]=RGBColourToName( GetNormalColour( 7 ) ),
		["@w"]=RGBColourToName( GetNormalColour( 8 ) ),
		["@R"]=RGBColourToName( GetBoldColour( 2 ) ),   ["@G"]=RGBColourToName( GetBoldColour( 3 ) ),
                ["@Y"]=RGBColourToName( GetBoldColour( 4 ) ),   ["@B"]=RGBColourToName( GetBoldColour( 5 ) ),
		["@M"]=RGBColourToName( GetBoldColour( 6 ) ),   ["@C"]=RGBColourToName( GetBoldColour( 7 ) ),
		["@W"]=RGBColourToName( GetBoldColour( 8 ) ) }
colours = { [1] = GetVariable( "col1" ) or "@W",
            [2] = GetVariable( "col2" ) or "@G" }

total,hour = {}, {}
leveltype = "level"
levelgains = {}
levelstats = ""
levelmobs = GetVariable( "levelmobs" ) or 0
levelxp = GetVariable( "levelxp" ) or 0
qtime = GetInfo(304)
mobtimes = {}
config = {}
questgains = ""
lastquests = {}
cpreward = {}
gqreward = {}

if GetVariable("gainsQuests") == nil then
  gainstotal = {
      ["quests"] = 0,
      ["qp"] = 0,
      ["tp"] = 0,
      ["train"] = 0,
      ["prac"] = 0
    }
else
  gainstotal = {
      ["quests"] = GetVariable("gainsQuests"),
      ["qp"] = GetVariable("gainsQp"),
      ["tp"] = GetVariable("gainsTp"),
      ["train"] = GetVariable("gainsTrain"),
      ["prac"] = GetVariable("gainsPrac")
    }
end -- check if script hasn't saved

config.qtime = GetVariable( "qtime" ) or "none"
config.qinfo = GetVariable( "qinfo" ) or "screen"
config.level = GetVariable( "level" ) or "screen"
config.stats = GetVariable( "stats" ) or "screen"
config.gqinfo = GetVariable( "gqinfo" ) or "none"
config.cpinfo = GetVariable( "cpinfo" ) or "none"

quiet = false
note = false

EnableTriggerGroup( "qinfo", false )
EnableTriggerGroup( "qreward", false )
EnableTriggerGroup( "lInfo", false )
EnableTriggerGroup( "cpinfo", false )
EnableTriggerGroup( "gqinfo", false )

function ResetHour()
  hour.xp = 0
  hour.qp = 0
  hour.gold = 0
end

function ResetStats()
  total.xp = 0
  total.qp = 0
  total.gold = 0
  ResetHour()
end

function ResetQuest()
   gainstotal = {
      ["quests"] = 0,
      ["qp"] = 0,
      ["tp"] = 0,
      ["train"] = 0,
      ["prac"] = 0
    }
  lastquests = {}
  mobtimes = {}
end

ResetStats() -- Initialize tables

function AddStat( statistic, amount )
  total[statistic] = total[statistic] + amount
  hour[statistic] = hour[statistic] + amount
end

--
-- settings changes
--

function ChangeColour( sTrig, sLine, wildcards )
  if colourcodes[ wildcards[2] ] ~= nil then
    colours[ tonumber( wildcards[1] ) ] = wildcards[2]
    ColourNote( colourcodes[ "@W" ],           "", "Colour "..wildcards[1].." set to ",
                colourcodes[ wildcards[2] ], "", wildcards[2] )
  else
    ColourNote( colourcodes[ "%W" ], "", wildcards[2].." is an invalid selection " )
  end
end

function Quiet()
  quiet = quiet == false
  if quiet then
    ColourNote( "white", "black", "GainMonitor now in quiet mode" )
  else
    ColourNote( "white", "black", "GainMonitor's quiet mode turned off" )
  end
end

function SetChan( sTrig, sLine, wildcards )
  config[ wildcards[1] ] = wildcards[2]
  ColourNote( "lime",  "black", wildcards[1],
              "white", "black", " channel changed to ",
	      "lime",  "black", wildcards[2] )
end

--
-- mob death
--

function MobXP( sTrig, sLine, wildcards )
  local xp = loadstring( "return "..wildcards[1] )()
  AddStat( "xp", xp )
  levelxp = levelxp + xp
  if sTrig == "MobXP" then
    levelmobs = levelmobs + 1
  end
end

function GetGold( sTrig, sLine, wildcards )
  AddStat( "gold", StripCommas( wildcards[1] ) )
end

function SplitGold( sTrig, sLine, wildcards )
  if wildcards[1] == "You" then
    AddStat( "gold", wildcards[3] - wildcards[2] )
  else
    AddStat( "gold", wildcards[3] )
  end
end


--
-- level info
--
function OnLevel ( sTrig, sLine, wildcards )
  leveltype = sTrig
  levelstats = ""
  levelgains = {}
  EnableTriggerGroup( "lInfo", true )
end

function PupGains( sTrig, sLine, wildcards )
  levelgains.train = wildcards[1]
end

function LevelGains( sTrig, sLine, wildcards )
  levelgains.hp = wildcards[1]
  levelgains.mp = wildcards[2]
  levelgains.mv = wildcards[3]
  levelgains.prac = wildcards[4]
  levelgains.train = wildcards[5]
end

function BonusTrain( sTrig, sLine, wildcards )
  levelgains.train = levelgains.train.."+"..wildcards[1]
end

function BonusStat( sTrig, sLine, wildcards )
  if levelstats ~= "" then levelstats = levelstats.." " end
  if wildcards[1] == "Luck" then
    levelstats = levelstats.."luck"
  else
    levelstats = levelstats..string.lower( string.sub( wildcards[1], 1, 3 ) )
  end
end

function EndLevel()
  local msg = { "Gained a "..leveltype..": " }
  if leveltype == "pup" then
    table.insert( msg, levelgains.train )
    table.insert( msg, " trains " )
  else
    table.insert( msg, levelgains.hp )
    table.insert( msg, "hp " )
    table.insert( msg, levelgains.mp )
    table.insert( msg, "mp " )
    table.insert( msg, levelgains.mv )
    table.insert( msg, "mvs " )
    table.insert( msg, levelgains.train )
    table.insert( msg, " trains " )
    table.insert( msg, levelgains.prac )
    table.insert( msg, " pracs " )
  end
  if levelstats ~= "" then
    table.insert( msg, levelstats )
    table.insert( msg, " bonus " )
  end
  local oldtime = tonumber( GetVariable("last_level_time") )
  local newtime = GetInfo(304)
--  First time - just remember when we levelled
  if oldtime == nil  then
    Note( "Level time noted.  This is the first time recorded." )
  else
--  Find total minutes it took to level
    local diff = math.floor( math.abs( newtime - oldtime ) )
--  Convert to days, hours, minutes, seconds
    if diff >= 86400 then
      table.insert( msg, math.floor( diff / 86400 ) )
      table.insert( msg, "d:" )
    end
    if diff >= 3600 then
      diff = diff % 86400 -- done to always show hour if it's been days
      table.insert( msg, string.format( "%02d", math.floor( diff / 3600 ) ) )
      table.insert( msg, "h:" )
      diff = diff % 3600
    end
    table.insert( msg, string.format( "%02d", math.floor( diff / 60 ) ) )
    table.insert( msg, "m:" )
    table.insert( msg, string.format( "%02d", diff % 60 ) )
    table.insert( msg, "s " )
  end
  table.insert( msg, levelmobs )
  table.insert( msg, " mobs killed (" )
  table.insert( msg, string.format( "%02.02f", levelxp / levelmobs ) )
  table.insert( msg, "xp/mob)" )
  DisplayInfo( config.level, msg )
  levelmobs,levelxp = 0,0
  SetVariable( "last_level_time", newtime )
  EnableTriggerGroup( "lInfo", false )
end -- OnLevel

--
-- quest functions
--

function questTime()
  DisplayInfo( config.qtime, { ">>", "QUEST TIME", "<<" } )
end

function questStart( strTriggerName, trig_line, wildcards )
  qtime = GetInfo(304)
  questor = wildcards[ 1 ]
  EnableTriggerGroup( "qinfo", true )
  gains = {
    ["qp"] = 0,
    ["tp"] = 0,
    ["train"] = 0,
    ["prac"] = 0,
    ["target"] = "",
    ["area" ] = ""
  }
end -- questStart

function mobName( strTriggerName, trig_line, wildcards )
  gains.mob = wildcards[2]
end -- mobName

function roomName( strTriggerName, trig_line, wildcards )
  roomname = wildcards[2];
end -- roomName

function areaName( strTriggerName, trig_line, wildcards )
  gains.area = wildcards[2]
  DisplayInfo( config.qinfo, { "Quest to kill ", gains.mob, " in ", roomname, " in ", gains.area, "." } )
end

function qfail()
end

function questKilled()
end

--
-- quest rewards
--

function QuestComplete( sTrig, sLine, wildcards )
  local gold = StripCommas( wildcards[2] )
  AddStat( "qp", wildcards[1] )
  AddStat( "gold", gold )
  questgains = wildcards[1]
  EnableTriggerGroup( "qinfo", true )
  EnableTriggerGroup("qreward", true)
  gains.qp = wildcards[1]
  gains.gold = gold
end

function BonusQuest( sTrig, sLine, wildcards )
  AddStat( "qp", wildcards[1] )
  questgains = questgains.."+"..wildcards[1]
  gains.qp = gains.qp + wildcards[1]
end

function AddTP( sTrig, sLine, wildcards )
  gains.tp = 1
end

function AddTrains( sTrig, sLine, wildcards )
  local temp = tonumber( wildcards[1] )
  if temp == nil then
    temp = 1
  end -- check for one prac
  gains.train = temp
end

function AddPracs( sTrig, sLine, wildcards )
  local temp = tonumber( wildcards[1] )
  if temp == nil then
    temp = 1
  end -- check for one prac
  gains.prac = temp
end

function FinishQuest()
  local qlength = GetInfo(304)
  qlength = math.floor( math.abs( qtime - qlength ) )
  gainstotal.quests = gainstotal.quests + 1
  gainstotal.qp = gainstotal.qp + gains.qp
  gainstotal.tp = gainstotal.tp + gains.tp
  gainstotal.train = gainstotal.train + gains.train
  gainstotal.prac = gainstotal.prac + gains.prac

  if #lastquests > 9 then
    for i = 1,9 do
      lastquests[i] = lastquests[i+1]
    end
    lastquests[ 10 ] = gains
  else
    table.insert( lastquests, gains )
  end
  local temp = GetInfo(304)
  lastquests[ #lastquests ].time = temp
  lastquests[ #lastquests ].length = qlength

--[[
  local msg = { gainstotal.quests.." quests completed! [", questgains, "qp" }
  if gains.tp > 0 then
    table.insert( msg, gains.tp )
    table.insert( msg, "TP" )
  end
  if gains.train > 0 then
    table.insert( msg, gains.train )
    table.insert( msg, "tr" )
  end
  if gains.prac > 0 then
    table.insert( msg, gains.prac )
    table.insert( msg, "pr" )
  end
  msg[#msg] = msg[#msg].."]["
  table.insert( msg, string.format( "%02d", qlength / 60 ) )
  table.insert( msg, "m:" )
  table.insert( msg, string.format( "%02d", qlength % 60 ) )
  table.insert( msg, "s][Avg:" )
  table.insert( msg, string.format( "%02.2f", gainstotal.qp / gainstotal.quests ) )
  table.insert( msg, "qp]" )
--]]
  local msg = { "Quest finished for ", questgains, "qp " }
  if gains.tp > 0 then
    table.insert( msg, gains.tp )
    table.insert( msg, "TP " )
  end
  if gains.train > 0 then
    table.insert( msg, gains.train )
    table.insert( msg, "tr " )
  end
  if gains.prac > 0 then
    table.insert( msg, gains.prac )
    table.insert( msg, "pr " )
  end
  table.insert( msg, AddCommas( gains.gold ) )
  table.insert( msg, "gold.  It took " )
  table.insert( msg, string.format( "%02d", qlength / 60 ) )
  table.insert( msg, "m:" )
  table.insert( msg, string.format( "%02d", qlength % 60 ) )
  table.insert( msg, "s.  Avg:" )
  table.insert( msg, string.format( "%02.2f", gainstotal.qp / gainstotal.quests ) )
  table.insert( msg, " qp/quest." )

  DisplayInfo( config.qinfo, msg )
  EnableTriggerGroup( "qinfo", false )
  EnableTriggerGroup("qreward", false )
end

--
-- CP functions
--

function CPStart()
  cpreward = { }
  EnableTriggerGroup( "cpinfo", true )
end

function CPQP( sTrig, sLine, wildcards )
  AddStat( "qp", wildcards[1] )
  cpreward.winqp = wildcards[1]
end

function CPTP( sTrig, sLine, wildcards )
  cpreward.tp = wildcards[1]
end

function CPTrain( sTrig, sLine, wildcards )
  cpreward.train = wildcards[1]
end

function CPPrac( sTrig, sLine, wildcards )
  cpreward.prac = wildcards[1]
end

function CPGold( sTrig, sLine, wildcards )
  local gold = StripCommas( wildcards[1] )
  AddStat( "gold", gold )
  cpreward.gold = gold
end

function CPStop( sTrig, sLine, wildcards )
  local msg = { "Campaign finished: ", cpreward.winqp, "qp " }
  if cpreward.tp ~= nil then
    table.insert( msg, cpreward.tp )
    table.insert( msg, "TP " )
  end
  if cpreward.train ~= nil then
    table.insert( msg, cpreward.train )
    table.insert( msg, "tr " )
  end
  if cpreward.prac ~= nil then
    table.insert( msg, cpreward.prac )
    table.insert( msg, "pr " )
  end
  table.insert( msg, AddCommas( cpreward.gold or 0 ) )
  table.insert( msg, "gold." )
  DisplayInfo( config.cpinfo, msg )
  EnableTriggerGroup( "cpinfo", false )
end

--
-- GQ functions
--

function GQStart()
  gqreward = { ["mobqp"] = 0, ["mobs"] = 0 }
end

function GQWinStart()
  EnableTriggerGroup( "gqinfo", true )
end

function GQMob( sTrig, sLine, wildcards )
  AddStat( "qp", wildcards[1] )
  gqreward.mobs = ( gqreward.mobs or 0 ) + 1
  gqreward.mobqp = ( gqreward.mobqp or 0 ) + wildcards[1]
end

function GQQP( sTrig, sLine, wildcards )
  AddStat( "qp", wildcards[1] )
  gqreward.winqp = wildcards[1]
end

function GQTrain( sTrig, sLine, wildcards )
  gqreward.train = wildcards[1]
end

function GQPrac( sTrig, sLine, wildcards )
  gqreward.prac = wildcards[1]
end

function GQGold( sTrig, sLine, wildcards )
  local gold = StripCommas( wildcards[1] )
  AddStat( "gold", gold )
  gqreward.gold = gold
end

function GQWinStop( sTrig, sLine, wildcards )
  local msg = {}
  if ( gqreward.mobs or 0 ) > 0 then
    if gqreward.winqp then
      msg = { "GQ Win #", wildcards[1], "  Rewards: ",
              gqreward.mobqp, "+", gqreward.winqp, "qp " }
      if gqreward.train ~= nil then
	table.insert( msg, gqreward.train )
	table.insert( msg, "tr " )
      end
      table.insert( msg, AddCommas( gqreward.gold ) )
      table.insert( msg, "gold." )
    else
      if gqreward.mobs > 1 then
        msg = { "last gq: ", gqreward.mobs, " mobs killed for ", gqreward.mobqp, "qp." }
      else
        msg = { "last gq: ", gqreward.mobs, " mob killed for ", gqreward.mobqp, "qp." }
      end
    end
    DisplayInfo( config.gqinfo, msg )
  end
  gqreward = { ["mobqp"] = 0, ["mobs"] = 0 }
  EnableTriggerGroup( config.gqinfo, false )
end

--
-- Note mode
--

function StartNote()
  note = true
end

function EndNote()
  note = false
end

--
-- Display functions
--

function DisplayInfo( channel, info )
  if ( quiet ~= true ) and ( channel ~= "none" ) then
    if ( channel == "screen" ) or note then
      for k,v in ipairs( info ) do
        ColourTell( colourcodes[ colours[ ( k % 2 + 1 ) or 1 ] ], "", v )
      end
      Note( "" )
    else
      local sInfo = channel.." "
      for k,v in ipairs( info ) do
        sInfo = sInfo..colours[ k % 2 + 1]..v
      end
      SendNoEcho( sInfo )
    end -- pick channel or to screen
  end -- check if it should be displayed
end

function AddCommas( number )
  for i  = math.floor( ( ( string.len(number) or "" ) -1 ) /3 ),1,-1 do
    number = string.sub( number, 1, ( ( i * -3 ) -1 ) )..","..string.sub( number, ( i * -3 ) )
  end
  return number
end

function StripCommas( number )
  return string.gsub( number, ",", "" )
end

function ReportHour()
  DisplayInfo( config.stats, { "Hourly Report:  ", AddCommas( hour.xp ),
                               "xp, ", AddCommas( hour.qp ), "qp, ",
			       AddCommas( hour.gold ), "gold." } )
end

function ReportSession()
  DisplayInfo( config.stats, { "Session Report:  ", AddCommas( total.xp ),
                               "xp, ", AddCommas( total.qp ), "qp, ",
			       AddCommas( total.gold ), "gold." } )
  ReportHour()
end

function hourlyReport()
  ReportHour()
  ResetHour()
end

function ShowChan()
  for k,v in pairs( config ) do
    ColourNote( "white", "black", string.format( "%-10s", k ),
                "lime",  "black", v )
  end
end

function QuestList()
  ColourNote( colourcodes[ colours[1] ],  "black", " qp  tp  tr  pr    time    mob" )
  ColourNote( colourcodes[ colours[2] ], "black", " --  --  --  --  -------  -----------------------------" )
  for i,v in ipairs(lastquests) do
    ColourTell( colourcodes[ colours[1] ],  "", string.format("%3d%4d%4d%4d%4dm:%02ds  ",
                                  v.qp, v.tp,  v.train, v.prac,
                                  math.floor(v.length/60), (v.length % 60) ) )
    ColourNote( colourcodes[ colours[2] ], "", v.mob or "--error in mob name--" )
  end
end

--
-- Plugin Calls
--

function OnPluginSaveState()
  SetVariable( "gainsQuests", gainstotal.quests )
  SetVariable( "gainsQp", gainstotal.qp )
  SetVariable( "gainsTp", gainstotal.tp )
  SetVariable( "gainsTrain", gainstotal.train )
  SetVariable( "gainsPrac", gainstotal.prac )
  SetVariable( "lastquests", serialize.save( "lastquests" ) )
  SetVariable( "col1", colours[1] )
  SetVariable( "col2", colours[2] )
  SetVariable( "levelmobs", levelmobs )
  SetVariable( "levelxp", levelxp )
  for k,v in pairs( config ) do
    SetVariable( k, v )
  end
end -- OnpluginSaveState

function OnPluginInstall()
  assert (loadstring (GetVariable ("lastquests") or "")) ()
  ColourNote( "white", "black", "Plugin ",
              "lime",    "black", GetPluginName(),
              "white", "black", " Version:",
              "lime",    "black", tostring(GetPluginInfo (GetPluginID(), 19)),
              "white", "black", " installed." )
end -- OnPluginInstall

function OnPluginClose()
  ColourNote( "white", "black", "Plugin ",
              "lime", "black",  GetPluginName(),
	      "white", "black", " closed." )
end -- OnPluginClose

function OnPluginHelp()
  ColourNote( "white", "black", "Plugin ",
              "lime",  "black", GetPluginName(),
              "white", "black", " Version:",
              "lime",  "black", tostring(GetPluginInfo (GetPluginID(), 19)),
              "white", "black", " installed." )
  ColourNote( "white", "black", "gain:chan   ",
              "lime",  "black", ": Show what channel each diplay type is set to." )
  ColourNote( "white", "black", "gain:col1   ",
              "lime",  "black", ": Change data text colour.  current: ",
	      colourcodes[ colours[1] ], "black", colours[1] )
  ColourNote( "white", "black", "gain:col2   ",
              "lime",  "black", ": Change generic text colour.  current: ",
	      colourcodes[ colours[2] ], "black", colours[2] )
  ColourNote( "white", "black", "gain:help   ",
              "lime",  "black", ": You just typed it.  Look what happened." )
  ColourNote( "white", "black", "gain:qlist  ",
              "lime",  "black", ": show the results of the last ten quests" )
  ColourNote( "white", "black", "gain:qreset ",
              "lime",  "black", ": wipe out stored questing history" )
  ColourNote( "white", "black", "gain:quiet  ",
              "lime",  "black", ": toggle quiet mode.  Turns on/off display messages." )
  ColourNote( "white", "black", "gain:report ",
              "lime",  "black", ": show result for the session." )
  ColourNote( "white", "black", "gain:reset  ",
              "lime",  "black", ": wipe out stored data for the session." )
  ColourNote( "white", "black", "gain:set * *",
              "lime",  "black", ": set <info type> <channel>  gain:chan shows the info types." )
  ColourNote( "lime",  "black", "              'none' gags the display, 'screen' puts info to output only" )
end

--[[
You raise a level!!
You gain 12 hit points, 18 mana, 15 moves, 2 practices and 3 trains.
Lucky! You gain an extra 1 training session!
You gain a bonus Intelligence point!
You can now use the following skills and spells : 
Spell Continual light.
Skill Whip.

You share 4,153 gold coins with 1 other member. Your share is 2,077 gold.
You get 4,153 gold coins from the stunned corpse of some reeds.

Congratulations, that was one of the GLOBAL QUEST mobs!
3 quest points awarded.
CONGRATULATIONS! You were the first to complete this quest!
Reward of 21 quest points added.
Reward of 1 practice session added.
Reward of 19100 gold coins added.
Global Quest: The global quest has been won by Balaam - 97th win.


You sell 31 * a Red Collar of the Nanjiki to Peto, the bard hall cook for 3,258 gold.
You haggle with Peto, the bard hall cook for an extra 948 gold.
You haggle with Peto, the bard hall cook for an extra 2,176 gold.
You sell 25 * Monkey Bone to Peto, the bard hall cook for 9,078 gold.
You haggle with Peto, the bard hall cook for an extra 691 gold.
You sell 17 * a White Collar of the Nanjiki to Peto, the bard hall cook for 2,521 gold.
You sell 17 * Monkey Magic to Peto, the bard hall cook for 4,660 gold.
You haggle with Peto, the bard hall cook for an extra 953 gold.
You haggle with Peto, the bard hall cook for an extra 210 gold.
You sell 4 * monkey teeth to Peto, the bard hall cook for 1,068 gold.
You haggle with Peto, the bard hall cook for an extra 239 gold.
You sell 4 * a Blue Collar of the Nanjiki to Peto, the bard hall cook for 1,097 gold.
You haggle with Peto, the bard hall cook for an extra 147 gold.
You sell <(Chainmail)> of the |Horde| to Peto, the bard hall cook for 447 gold.
You haggle with Peto, the bard hall cook for an extra 90 gold.
You sell <(Coif)> of the |Horde| to Peto, the bard hall cook for 290 gold.
You sell <(Scale-mail Breeches)> of the |Horde| to Peto, the bard hall cook for 200 gold.
You sell <(Steel Boots)> of the |Horde| to Peto, the bard hall cook for 250 gold.
You sell )Flurry of Sand( to Peto, the bard hall cook for 670 gold.
You haggle with Peto, the bard hall cook for an extra 137 gold.
You sell an antlion {husk} to Peto, the bard hall cook for 794 gold.


-]]

]]>
</script>

</muclient>
